ifneq ($(VERBOSE),true)
  QUIET:=@
endif

ifndef CC
  CC:=gcc
endif

ifndef CXX
  CXX:=g++
endif

ifndef CXXSTANDARD
  CXXSTANDARD:=-std=c++14
endif

ifndef CSTANDARD
  CSTANDARD:=-std=c11
endif

ifndef SOURCE_PATH
  SOURCE_PATH=.
endif

ifndef BUILD_PATH
  BUILD_PATH=$(SOURCE_PATH)/bin
endif
UNAME_FLAGS   = -DUNAME_RELEASE="$(shell uname -r)" \
		-DUNAME_VERSION="$(shell uname -v)" \
		-DUNAME_MACHINE="$(shell uname -m)" \
		-DUNAME_SYSNAME="$(shell uname -s)" \
		$(shell uname -r | sed -e "s/^\([0-9]*\)\.*\([0-9]*\)\.*\([0-9]*\)\(.*\)$$/-DUNAME_KERNEL_MAJOR=\1 -DUNAME_KERNEL_MINOR=\2 -DUNAME_KERNEL_RELEASE=\3/")

INCPATH       = -I.
CFLAGS        = -pipe -g -Os -Wall -W -fPIC $(DEFINES) $(INCPATH) $(UNAME_FLAGS)
CXXFLAGS      = $(CFLAGS) -fno-exceptions -fno-rtti
LDFLAGS       = 

TARGET        = buildtest
SOURCES       = application.cpp \
		socket.cpp \
		childprocess.cpp \
		cxxutils/vfifo.cpp \
		cxxutils/configmanip.cpp \
		cxxutils/syslogstream.cpp \
		cxxutils/translate.cpp \
		cxxutils/stringtoken.cpp \
		specialized/eventbackend.cpp \
		specialized/mutex.cpp \
		specialized/peercred.cpp \
		specialized/procstat.cpp \
		specialized/proclist.cpp \
		specialized/fstable.cpp \
		specialized/mount.cpp \
		specialized/mountpoints.cpp \
		specialized/module.cpp \
		specialized/MountEvent.cpp \
		specialized/FileEvent.cpp \
		specialized/PollEvent.cpp \
		specialized/ProcessEvent.cpp \
		specialized/TimerEvent.cpp \
#		integration/sdl.cpp

TESTSOURCES   = tests/build_test.cpp \
		tests/proclist_test.cpp \
		tests/procstat_test.cpp
OBJS := $(SOURCES:.s=.o)
OBJS := $(OBJS:.c=.o)
OBJS := $(OBJS:.cpp=.o)
OBJS := $(foreach f,$(OBJS),$(BUILD_PATH)/$(f))
SOURCES := $(foreach f,$(SOURCES),$(SOURCE_PATH)/$(f))
TESTS := $(foreach f,$(TESTSOURCES:.cpp=),$(BUILD_PATH)/$(f))

$(BUILD_PATH)/%.o: $(SOURCE_PATH)/%.cpp
	@echo [Compiling]: $<
	$(QUIET) $(CXX) -c -o $@ $< $(CXXSTANDARD) $(CXXFLAGS)

$(BUILD_PATH)/%.o: $(SOURCE_PATH)/%.c
	@echo [Compiling]: $<
	$(QUIET) $(CC) -c -o $@ $< $(CSTANDARD) $(CFLAGS)

$(BUILD_PATH)/%: $(BUILD_PATH)/%.o
	@echo [Linking]: $@
	$(QUIET) $(CXX) -o $@ $@.o $(OBJS) $(CXXSTANDARD) $(CXXFLAGS)

$(TARGET): OUTPUT_DIR $(OBJS) $(TESTS)
	@echo [Completed]: $@

OUTPUT_DIR:
	$(QUIET) mkdir -p $(BUILD_PATH)/tests
	$(QUIET) mkdir -p $(BUILD_PATH)/cxxutils
	$(QUIET) mkdir -p $(BUILD_PATH)/integration
	$(QUIET) mkdir -p $(BUILD_PATH)/specialized

clean:
	$(QUIET) rm -f $(TARGET)
	$(QUIET) rm -rf $(BUILD_PATH)
